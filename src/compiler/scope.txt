
<compilation unit> ::= <import declarations> <class declarations>

<import declarations> ::= "" | <import declaration> | <import declarations> <import declaration>
<import declaration> ::= <single type import declaration> | <type import on demand declaration>
<single type import declaration> ::= import <type name> ;
<type import on demand declaration> ::= import <package name> . * ;



<class declarations> ::= "" | <class declaration> | <class declarations> <class declaration>
<class declaration> ::= public class <identifier> <class body>
<class body> ::= { <class body declarations> }
<class body declarations> ::= "" | <class body declaration> | <class body declarations> <class body declaration>
<class body declaration> ::= <field declaration> | <method declaration>



<field declaration> ::= public static <type> <variable declarators> ;
<variable declarators> ::= <variable declarator> | <variable declarators> , <variable declarator>
<variable declarator> ::= <identifier> | <identifier> = <variable initializer>
<variable initializer> ::= <expression> | <array initializer>
<variable initializers> ::= "" | <expression> | <variable initializers> , <expression>
<array initializer> ::= { <variable initializers> }



<method declaration> ::= <method header> <method body>
<method header> ::= public static <result type> <method declarator>
<result type> ::= <type> | void
<method declarator> ::= <identifier> ( <formal parameter list> )
<formal parameter list> ::= "" | <formal parameter> | <formal parameter list> , <formal parameter>
<formal parameter> ::= <type> <variable declarator id>
<method body> ::= <block>



<type> ::= <primitive type> | <reference type>
<primitive type> ::= <numeric type> | boolean
<numeric type> ::= <integral type> | <floating-point type>
<integral type> ::= byte | short | int | long | char
<floating-point type> ::= float | double
<reference type> ::= <class type> | <array type>
<class type> ::= <type name>
<array type> ::= <type> [ ]



<block> ::= { <block statements> }
<block statements> ::= "" | <block statement> | <block statements> <block statement>
<block statement> ::= <local variable declaration statement> | <statement>
<local variable declaration statement> ::= <local variable declaration> ;
<local variable declaration> ::= int <variable declarators>


<statement> ::= <statement without trailing substatement> | <if then statement> | <if then else statement> | <while statement> | <for statement>
<statement no short if> ::= <statement without trailing substatement> | <if then else statement no short if> | <while statement no short if> | <for statement no short if>
<statement without trailing substatement> ::= <block> | <empty statement> | <expression statement> | <do statement> | <break statement> | <continue statement> | <return statement> 

<if then statement>::= if ( <expression> ) <statement>
<if then else statement>::= if ( <expression> ) <statement no short if> else <statement>
<if then else statement no short if> ::= if ( <expression> ) <statement no short if> else <statement no short if>

<while statement> ::= while ( <expression> ) <statement>
<while statement no short if> ::= while ( <expression> ) <statement no short if>

<for statement> ::= for ( <for init>? ; <expression>? ; <for update>? ) <statement>
<for statement no short if> ::= for ( <for init>? ; <expression>? ; <for update>? ) <statement no short if>
<for init> ::= "" | <statement expression list> | <local variable declaration>
<for update> ::= "" | <statement expression list>
<statement expression list> ::= <statement expression> | <statement expression list> , <statement expression>

<empty statement> ::= ;
<expression statement> ::= <statement expression> ;
<statement expression> ::= <assignment> | <preincrement expression> | <postincrement expression> | <predecrement expression> | <postdecrement expression> | <method invocation> 
<do statement> ::= do <statement> while ( <expression> ) ;
<break statement> ::= break ;
<continue statement> ::= continue ;
<return statement> ::= return ; | return <expression> ;



<expression> ::= <assignment expression>
<assignment expression> ::= <conditional expression> | <assignment>
<assignment> ::= <left hand side> <assignment operator> <assignment expression>
<left hand side> ::= <expression name> | <field access> | <array access>
<assignment operator> ::= = | *= | /= | %= | += | -= | <<= | >>= | >>>= | &= | ^= | |=

<conditional expression> ::= <conditional or expression> | <conditional or expression> ? <expression> : <conditional expression>
<conditional or expression> ::= <conditional and expression> | <conditional or expression> || <conditional and expression>
<conditional and expression> ::= <inclusive or expression> | <conditional and expression> && <inclusive or expression>
<inclusive or expression> ::= <exclusive or expression> | <inclusive or expression> | <exclusive or expression>
<exclusive or expression> ::= <and expression> | <exclusive or expression> ^ <and expression>
<and expression> ::= <equality expression> | <and expression> & <equality expression>
<equality expression> ::= <relational expression> | <equality expression> == <relational expression> | <equality expression> != <relational expression>
<relational expression> ::= <shift expression> | <relational expression> < <shift expression> | <relational expression> > <shift expression> | <relational expression> <= <shift expression> | <relational expression> >= <shift expression> | <relational expression> instanceof <reference type>
<shift expression> ::= <additive expression> | <shift expression> << <additive expression> | <shift expression> >> <additive expression> | <shift expression> >>> <additive expression>
<additive expression> ::= <multiplicative expression> | <additive expression> + <multiplicative expression> | <additive expression> - <multiplicative expression>
<multiplicative expression> ::= <unary expression> | <multiplicative expression> * <unary expression> | <multiplicative expression> / <unary expression> | <multiplicative expression> % <unary expression>

<unary expression> ::= <preincrement expression> | <predecrement expression> | + <unary expression> | - <unary expression> | <unary expression not plus minus>
<predecrement expression> ::= -- <unary expression>
<preincrement expression> ::= ++ <unary expression>
<unary expression not plus minus> ::= <postfix expression> | ~ <unary expression> | ! <unary expression>
<postdecrement expression> ::= <postfix expression> --
<postincrement expression> ::= <postfix expression> ++
<postfix expression> ::= <primary> | <expression name> | <postincrement expression> | <postdecrement expression>

<method invocation> ::= <method name> ( <argument list> ) | <primary> . <identifier> ( <argument list> )
<argument list> ::= "" | <expression> | <argument list> , <expression>
<primary> ::= <primary no new array>
<primary no new array> ::= <literal> | ( <expression> ) | <method invocation> | <array access>
<array access> ::= <expression name> [ <expression> ] | <primary no new array> [ <expression> ]



<package name> ::= <identifier> | <package name> . <identifier>
<type name> ::= <identifier> | <package name> . <identifier>
<simple type name> ::= <identifier>
<expression name> ::= <identifier> | <ambiguous name> . <identifier>
<method name> ::= <identifier> | <ambiguous name> . <identifier>
<ambiguous name>::= <identifier> | <ambiguous name> . <identifier>

<literal> ::= <signed number literal> | <boolean literal> | <character literal> | <string literal> | <null literal>

<signed number literal> ::= <sign> <number literal>
<number literal> ::= <integer literal> | <floating-point literal>
<sign> ::= "" | + | -

<integer literal> ::= <decimal integer literal> | <hex integer literal> | <octal integer literal>
<decimal integer literal> ::= <decimal numeral> | <decimal numeral> <integer type suffix>
<hex integer literal> ::= <hex numeral> | <hex numeral> <integer type suffix>
<octal integer literal> ::= <octal numeral> | <octal numeral> <integer type suffix>
<integer type suffix> ::= l | L
<decimal numeral> ::= 0 | <non zero digit> | <non zero digit> <digits>
<digits> ::= <digit> | <digits> <digit>
<digit> ::= 0 | <non zero digit>
<non zero digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<hex numeral> ::= 0 x <hex digit> | 0 X <hex digit> | <hex numeral> <hex digit>
<hex digit> :: = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e | f | A | B | C | D | E | F
<octal numeral> ::= 0 <octal digit> | <octal numeral> <octal digit>
<octal digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7

<floating-point literal> ::= <digits> . | <digits> . <digits> | <digits> . <float type suffix> | <digits> . <digits> <float type suffix>
<float type suffix> ::= f | F | d | D

<character literal> ::= ' <single character> '
<single character> ::= <ASCII character> except ' and \
<string literal> ::= " <string characters> "
<string characters> ::= <string character> | <string characters> <string character>
<string character> ::= <input character> except " and \
<boolean literal> ::= true | false
<null literal> ::= null

<identifier> ::= <letter> | <letter> <letters or digits>
<letters or digits> ::= <letters> | <digits>
<letters> ::= <letter> | <letters> <letter>
<letter> ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z
